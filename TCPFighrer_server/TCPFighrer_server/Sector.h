#pragma once

// 섹터좌표
struct st_SECTOR_POS {
	int _X;
	int _Y;
};

// 주변 섹터좌표
struct st_SECTOR_AROUND{
	int _count;
	st_SECTOR_POS _around[9];
};

class CCharacter; // 전방선언

//////////////////////////////////////////////////////////////////////////
// 캐릭터의 현좌표를 섹터좌표로 계산해서 해당 섹터에 넣음
// 
// Parameters: CCharacter *.
// Return: 없음.
//////////////////////////////////////////////////////////////////////////
void Sector_AddCharacter(CCharacter *pCharacter);

//////////////////////////////////////////////////////////////////////////
// 캐릭터의 현재좌표에 해당하는 섹터에서 그 캐릭터를 삭제
// 
// Parameters: CCharacter *.
// Return:  없음.
//////////////////////////////////////////////////////////////////////////
void Sector_RemoveCharacter(CCharacter *pCharacter);

//////////////////////////////////////////////////////////////////////////
// 현재 위치한 섹터에서 삭제한후 섹터 좌표를 새롭게 구함
// 
// Parameters: CCharacter *.
// Return: (BOOL) 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL Sector_UpdateCharacter(CCharacter *pCharacter);


//////////////////////////////////////////////////////////////////////////
// 섹터좌표 기준으로 주변 영향권 얻기
// 
// Parameters: int , int , st_SECTOR_AROUND *.
// Return: 없음.
//////////////////////////////////////////////////////////////////////////
void GetSectorAround(int iSecX, int iSecY, st_SECTOR_AROUND *pSectorAround);

//////////////////////////////////////////////////////////////////////////
// 캐릭터가 섹터를 이동할 때 빠질/ 더할 섹터의 정보 얻기
// 
// Parameters: CCharacter *,   st_SECTOR_AROUND *, st_SECTOR_AROUND *.
// Return: 없음.
//////////////////////////////////////////////////////////////////////////
void GetUpdateSectorAround(CCharacter *pCharacter,   st_SECTOR_AROUND *pRemoveSector, st_SECTOR_AROUND *pAddSector);


//////////////////////////////////////////////////////////////////////////
// 이전 섹터에서 없어진 부분에 - 케릭터 삭제 메시지
// 이동하는 캐릭터에게 이전섹터에서 제외된 부분의 캐릭터의 삭제메시지
// 새로추가된 섹터에 - 캐릭터 생성 + 이동 메시지
// 이동하는 캐릭터에게 - 새로 진입한 섹터의 캐릭터 생성 메시지
// 
// Parameters: CCharacter *
// Return: 없음.
//////////////////////////////////////////////////////////////////////////
void ChatacterSectorUpdatePacket(CCharacter *pCharacter);


extern std::list<CCharacter *> g_sector[dfSECTOR_MAX_Y][dfSECTOR_MAX_X];
