#pragma once
#include "NetworkCore.h"
#include "ContentCore.h"


//////////////////////////////////////////////////////////////////////////
// wMsgType타입에 따른 적절한 컨첸츠 처리함수를 호출한다
// 
// Parameters: CSession *, CPacket *, BYTE
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL PacketProc(CSession *pSession, CPacket *pPacket, BYTE	byType); // 처리 성공시 TRUE


//////////////////////////////////////////////////////////////////////////
// 세션에 캐릭터 달아주기
// 
// Parameters: DWORD
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////
BOOL InstantiateCharacter(CSession *pSession);



#pragma region Client -> Server
//////////////////////////////////////////////////////////////////////////
// 직렬화 패킷에 따른 컨탠츠를 처리한다
// 
// Parameters: CSession *, CPacket *
// Return: 성공 / 실패
//////////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------
// 캐릭터 이동시작 패킷						Client -> Server
//
// 자신의 캐릭터 이동시작시 이 패킷을 보낸다.
// 이동 중에는 본 패킷을 보내지 않으며, 키 입력이 변경되었을 경우에만
// 보내줘야 한다.
//
// (왼쪽 이동중 위로 이동 / 왼쪽 이동중 왼쪽 위로 이동... 등등)
//
//	1	-	Direction	( 방향 디파인 값 8방향 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
BOOL CS_MoveStart(CSession *pSession, CPacket *pPacket);


//---------------------------------------------------------------
// 캐릭터 이동중지 패킷						Client -> Server
//
// 이동중 키보드 입력이 없어서 정지되었을 때, 이 패킷을 서버에 보내준다.
//
//	1	-	Direction	( 방향 디파인 값 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
BOOL CS_MoveStop(CSession *pSession, CPacket *pPacket);


//---------------------------------------------------------------
// 캐릭터 공격 패킷							Client -> Server
//
// 공격 키 입력시 본 패킷을 서버에게 보낸다.
// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
//
// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
//
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y	
//
//---------------------------------------------------------------
BOOL CS_ActionAttack_1(CSession *pSession, CPacket *pPacket);


//---------------------------------------------------------------
// 캐릭터 공격 패킷							Client -> Server
//
// 공격 키 입력시 본 패킷을 서버에게 보낸다.
// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
//
// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
//
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
BOOL CS_ActionAttack_2(CSession *pSession, CPacket *pPacket);

//---------------------------------------------------------------
// 캐릭터 공격 패킷							Client -> Server
//
// 공격 키 입력시 본 패킷을 서버에게 보낸다.
// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
//
// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
//
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
BOOL CS_ActionAttack_3(CSession *pSession, CPacket *pPacket);


//---------------------------------------------------------------
// Echo 용 패킷					Client -> Server
//
//	4	-	Time
//
//---------------------------------------------------------------
BOOL CS_ECHO(CSession *pSession, CPacket *pPacket);



#pragma endregion


#pragma region Server -> Client
//////////////////////////////////////////////////////////////////////////
// Send.. (CClient *pClient ....)
// 클라에게 패킷을 보낸다!
// 
// Parameters: CClient *, ...
// Return: 없음
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
//  MakePacket... ()
// 매개변수에 따른 직렬화 패킷을 만들고, 헤더를 만든다
// 
// Parameters: st_PACKET_HEADER *, CPacket *, ...
// Return: 없음
//////////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------
// 클라이언트 자신의 캐릭터 할당		Server -> Client
//
// 서버에 접속시 최초로 받게되는 패킷으로 자신이 할당받은 ID 와
// 자신의 최초 위치, HP 를 받게 된다. (처음에 한번 받게 됨)
//
// 이 패킷을 받으면 자신의 ID,X,Y,HP 를 저장하고 캐릭터를 생성시켜야 한다.
//
//	4	-	ID
//	1	-	Direction
//	2	-	X
//	2	-	Y
//	1	-	HP
//
//---------------------------------------------------------------
void MakePacket_Create_My_Character(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y, BYTE HP);



//---------------------------------------------------------------
// 다른 클라이언트의 캐릭터 생성 패킷		Server -> Client
//
// 처음 서버에 접속시 이미 접속되어 있던 캐릭터들의 정보
// 또는 게임중에 접속된 클라이언트들의 생성 용 정보.
//
//
//	4	-	ID
//	1	-	Direction
//	2	-	X
//	2	-	Y
//	1	-	HP
//
//---------------------------------------------------------------
void MakePacket_Create_Other_Character(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y, BYTE HP);


//---------------------------------------------------------------
// 캐릭터 삭제 패킷						Server -> Client
//
// 캐릭터의 접속해제 또는 캐릭터가 죽었을때 전송됨.
//
//	4	-	ID
//
//---------------------------------------------------------------
void MakePacket_Delete_Character(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID);



//---------------------------------------------------------------
// 캐릭터 이동시작 패킷						Server -> Client
//
// 다른 유저의 캐릭터 이동시 본 패킷을 받는다.
// 패킷 수신시 해당 캐릭터를 찾아 이동처리를 해주도록 한다.
//
// 패킷 수신 시 해당 키가 계속해서 눌린것으로 생각하고
// 해당 방향으로 계속 이동을 하고 있어야만 한다.
//
//	4	-	ID
//	1	-	Direction	( 방향 디파인 값 8방향 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Move_Start(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y);



//---------------------------------------------------------------
// 캐릭터 이동중지 패킷						Server -> Client
//
// ID 에 해당하는 캐릭터가 이동을 멈춘것이므로
// 캐릭터를 찾아서 방향과, 좌표를 입력해주고 멈추도록 처리한다.
//
//	4	-	ID
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Move_Stop(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y);



//---------------------------------------------------------------
// 캐릭터 공격 패킷							Server -> Client
//
// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
//
//	4	-	ID
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Action_Attack1(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y);



//---------------------------------------------------------------
// 캐릭터 공격 패킷							Server -> Client
//
// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
//
//	4	-	ID
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Action_Attack2(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y);



//---------------------------------------------------------------
// 캐릭터 공격 패킷							Server -> Client
//
// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
//
//	4	-	ID
//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Action_Attack3(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, BYTE dir, WORD X, WORD Y);



//---------------------------------------------------------------
// 캐릭터 데미지 패킷							Server -> Client
//
// 공격에 맞은 캐릭터의 정보를 보냄.
//
//	4	-	AttackID	( 공격자 ID )
//	4	-	DamageID	( 피해자 ID )
//	1	-	DamageHP	( 피해자 HP )
//
//---------------------------------------------------------------
void MakePacket_Damage(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD AttackID, DWORD DamageID, BYTE HP);



//---------------------------------------------------------------
// 동기화를 위한 패킷					Server -> Client
//
// 서버로부터 동기화 패킷을 받으면 해당 캐릭터를 찾아서
// 캐릭터 좌표를 보정해준다.
//
//	4	-	ID
//	2	-	X
//	2	-	Y
//
//---------------------------------------------------------------
void MakePacket_Sync(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD SID, WORD X, WORD Y);

//---------------------------------------------------------------
// Echo 응답 패킷				Server -> Client
//
//	4	-	Time
//
//---------------------------------------------------------------
void MakePacket_Echo(st_PACKET_HEADER *pHeader, CPacket *pPacket, DWORD dwTime);


#pragma endregion
